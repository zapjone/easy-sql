package com.easy.sql.core.common;

import java.io.Serializable;
import java.time.Duration;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * @author zhangap
 * @version 1.0, 2022/4/19
 */
public class Time implements Serializable {

    private static final long serialVersionUID = -350254188460915999L;

    /** The time unit for this policy's time interval. */
    private final TimeUnit unit;

    /** The size of the windows generated by this policy. */
    private final long size;

    /** Instantiation only via factory method. */
    private Time(long size, TimeUnit unit) {
        this.unit = checkNotNull(unit, "time unit may not be null");
        this.size = size;
    }

    // ------------------------------------------------------------------------
    //  Properties
    // ------------------------------------------------------------------------

    /**
     * Gets the time unit for this policy's time interval.
     *
     * @return The time unit for this policy's time interval.
     */
    public TimeUnit getUnit() {
        return unit;
    }

    /**
     * Gets the length of this policy's time interval.
     *
     * @return The length of this policy's time interval.
     */
    public long getSize() {
        return size;
    }

    /**
     * Converts the time interval to milliseconds.
     *
     * @return The time interval in milliseconds.
     */
    public long toMilliseconds() {
        return unit.toMillis(size);
    }

    @Override
    public String toString() {
        return toMilliseconds() + " ms";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Time time = (Time) o;
        return toMilliseconds() == time.toMilliseconds();
    }

    @Override
    public int hashCode() {
        return Objects.hash(toMilliseconds());
    }

    // ------------------------------------------------------------------------
    //  Factory
    // ------------------------------------------------------------------------

    /**
     * Creates a new {@link Time} of the given duration and {@link TimeUnit}.
     *
     * @param size The duration of time.
     * @param unit The unit of time of the duration, for example {@code TimeUnit.SECONDS}.
     * @return The time policy.
     */
    public static Time of(long size, TimeUnit unit) {
        return new Time(size, unit);
    }

    /** Creates a new {@link Time} that represents the given number of milliseconds. */
    public static Time milliseconds(long milliseconds) {
        return of(milliseconds, TimeUnit.MILLISECONDS);
    }

    /** Creates a new {@link Time} that represents the given number of seconds. */
    public static Time seconds(long seconds) {
        return of(seconds, TimeUnit.SECONDS);
    }

    /** Creates a new {@link Time} that represents the given number of minutes. */
    public static Time minutes(long minutes) {
        return of(minutes, TimeUnit.MINUTES);
    }

    /** Creates a new {@link Time} that represents the given number of hours. */
    public static Time hours(long hours) {
        return of(hours, TimeUnit.HOURS);
    }

    /** Creates a new {@link Time} that represents the given number of days. */
    public static Time days(long days) {
        return of(days, TimeUnit.DAYS);
    }

    /**
     * Creates a new {@link Time} that represents the number of milliseconds in the given duration.
     */
    public static Time fromDuration(Duration duration) {
        return milliseconds(duration.toMillis());
    }
}
