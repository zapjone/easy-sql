{
    # Generated parser implementation package and class name.
    package: "com.easy.sql.parser.impl",
    class: "EasySqlParserImpl",

    # List of additional classes and packages to import.
    # Example. "org.apache.calcite.sql.*", "java.util.List".
    # Please keep the import classes in alphabetical order if new class is added.
    imports: [
    ]

    # List of new keywords. Example: "DATABASES", "TABLES". If the keyword is not a reserved
    # keyword, please also add it to 'nonReservedKeywords' section.
    # Please keep the keyword in alphabetical order if new keyword is added.
    keywords: [
    ]

    # List of keywords from "keywords" section that are not reserved.
    nonReservedKeywords: [
    ]

    # List of non-reserved keywords to add;
    # items in this list become non-reserved.
    # Please keep the keyword in alphabetical order if new keyword is added.
    nonReservedKeywordsToAdd: [
    ]

    # List of non-reserved keywords to remove;
    # items in this list become reserved
    nonReservedKeywordsToRemove: [
    ]

    # List of methods for parsing custom SQL statements.
    # Return type of method implementation should be 'SqlNode'.
    # Example: SqlShowDatabases(), SqlShowTables().
    statementParserMethods: [
    ]

    # List of methods for parsing custom literals.
    # Return type of method implementation should be "SqlNode".
    # Example: ParseJsonLiteral().
    literalParserMethods: [
    ]

    # List of methods for parsing ddl supported data types.
    # Return type of method implementation should be "SqlTypeNameSpec".
    # Example: SqlParseTimeStampZ().
    dataTypeParserMethods: [
    ]

    # List of methods for parsing builtin function calls.
    # Return type of method implementation should be "SqlNode".
    # Example: DateFunctionCall().
    builtinFunctionCallMethods: [
    ]

    # List of methods for parsing extensions to "ALTER <scope>" calls.
    # Each must accept arguments "(SqlParserPos pos, String scope)".
    # Example: "SqlUploadJarNode"
    alterStatementParserMethods: [
    ]

    # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls.
    # Each must accept arguments "(SqlParserPos pos, boolean replace)".
    createStatementParserMethods: [
    ]

    # List of methods for parsing extensions to "DROP" calls.
    # Each must accept arguments "(Span s)".
    dropStatementParserMethods: [
    ]

    # Binary operators tokens
    binaryOperatorsTokens: [
    ]

    # Binary operators initialization
    extraBinaryExpressions: [
    ]

    # List of files in @includes directory that have parser method
    # implementations for parsing custom SQL statements, literals or types
    # given as part of "statementParserMethods", "literalParserMethods" or
    # "dataTypeParserMethods".
    implementationFiles: [
        "parserImpls.ftl"
    ]

    # List of additional join types. Each is a method with no arguments.
    # Example: LeftSemiJoin()
    joinTypes: [
    ]

    includePosixOperators: false
    includeCompoundIdentifier: true
    includeBraces: true
    includeAdditionalDeclarations: false
}