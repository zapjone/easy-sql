{
    # Generated parser implementation package and class name.
    package: "com.easy.sql.parser.impl",
    class: "EasySqlParserImpl",

    # List of additional classes and packages to import.
    # Example. "org.apache.calcite.sql.*", "java.util.List".
    # Please keep the import classes in alphabetical order if new class is added.
    imports: [
        "com.easy.sql.parser.ddl.constraint.SqlConstraintEnforcement"
        "com.easy.sql.parser.ddl.constraint.SqlTableConstraint"
        "com.easy.sql.parser.ddl.constraint.SqlUniqueSpec"
        "com.easy.sql.parser.ddl.SqlAlterDatabase"
        "com.easy.sql.parser.ddl.SqlAlterFunction"
        "com.easy.sql.parser.ddl.SqlAlterTable"
        "com.easy.sql.parser.ddl.SqlAlterTableAddConstraint"
        "com.easy.sql.parser.ddl.SqlAlterTableDropConstraint"
        "com.easy.sql.parser.ddl.SqlAlterTableOptions"
        "com.easy.sql.parser.ddl.SqlAlterTableRename"
        "com.easy.sql.parser.ddl.SqlAlterTableReset"
        "com.easy.sql.parser.ddl.SqlAlterView"
        "com.easy.sql.parser.ddl.SqlAlterViewAs"
        "com.easy.sql.parser.ddl.SqlAlterViewRename"
        "com.easy.sql.parser.ddl.SqlCreateCatalog"
        "com.easy.sql.parser.ddl.SqlCreateDatabase"
        "com.easy.sql.parser.ddl.SqlCreateFunction"
        "com.easy.sql.parser.ddl.SqlCreateTable"
        "com.easy.sql.parser.ddl.SqlCreateTable.TableCreationContext"
        "com.easy.sql.parser.ddl.SqlCreateView"
        "com.easy.sql.parser.ddl.SqlDropCatalog"
        "com.easy.sql.parser.ddl.SqlDropDatabase"
        "com.easy.sql.parser.ddl.SqlDropFunction"
        "com.easy.sql.parser.ddl.SqlDropTable"
        "com.easy.sql.parser.ddl.SqlDropView"
        "com.easy.sql.parser.ddl.SqlSet"
        "com.easy.sql.parser.ddl.SqlTableColumn"
        "com.easy.sql.parser.ddl.SqlTableLike"
        "com.easy.sql.parser.ddl.SqlTableLike.FeatureOption"
        "com.easy.sql.parser.ddl.SqlTableLike.MergingStrategy"
        "com.easy.sql.parser.ddl.SqlTableLike.SqlTableLikeOption"
        "com.easy.sql.parser.ddl.SqlTableOption"
        "com.easy.sql.parser.ddl.SqlUseCatalog"
        "com.easy.sql.parser.ddl.SqlUseDatabase"
        "com.easy.sql.parser.dml.RichSqlInsert"
        "com.easy.sql.parser.dml.RichSqlInsertKeyword"
        "com.easy.sql.parser.dml.SqlBeginStatementSet"
        "com.easy.sql.parser.dml.SqlEndStatementSet"
        "com.easy.sql.parser.dql.SqlDescribeCatalog"
        "com.easy.sql.parser.dql.SqlDescribeDatabase"
        "com.easy.sql.parser.dql.SqlRichExplain"
        "com.easy.sql.parser.dql.SqlShowCatalogs"
        "com.easy.sql.parser.dql.SqlShowCurrentCatalog"
        "com.easy.sql.parser.dql.SqlShowDatabases"
        "com.easy.sql.parser.dql.SqlShowCurrentDatabase"
        "com.easy.sql.parser.dql.SqlShowFunctions"
        "com.easy.sql.parser.dql.SqlShowTables"
        "com.easy.sql.parser.dql.SqlShowCreateTable"
        "com.easy.sql.parser.dql.SqlShowViews"
        "com.easy.sql.parser.dql.SqlRichDescribeTable"
        "com.easy.sql.parser.type.ExtendedSqlCollectionTypeNameSpec"
        "com.easy.sql.parser.type.ExtendedSqlRowTypeNameSpec"
        "com.easy.sql.parser.type.SqlMapTypeNameSpec"
        "com.easy.sql.parser.type.SqlRawTypeNameSpec"
        "com.easy.sql.parser.type.SqlTimestampLtzTypeNameSpec"
        "com.easy.sql.parser.validate.EasySqlConformance"
        "com.easy.sql.parser.SqlProperty"
        "org.apache.calcite.sql.SqlAlienSystemTypeNameSpec"
        "org.apache.calcite.sql.SqlCreate"
        "org.apache.calcite.sql.SqlDrop"
        "java.util.ArrayList"
        "java.util.HashSet"
        "java.util.List"
        "java.util.Set"
    ]

    # List of new keywords. Example: "DATABASES", "TABLES". If the keyword is not a reserved
    # keyword, please also add it to 'nonReservedKeywords' section.
    # Please keep the keyword in alphabetical order if new keyword is added.
    keywords: [
        "BYTES"
        "CATALOGS"
        "CHANGELOG_MODE"
        "COMMENT"
        "DATABASES"
        "ENFORCED"
        "ESTIMATED_COST"
        "EXTENDED"
        "FUNCTIONS"
        "IF"
        "JSON_EXECUTION_PLAN"
        "JAR"
        "JARS"
        "LOAD"
        "METADATA"
        "MODULES"
        "OVERWRITE"
        "OVERWRITING"
        "PARTITIONED"
        "PARTITIONS"
        "PYTHON"
        "RAW"
        "REMOVE"
        "RENAME"
        "SCALA"
        "STRING"
        "TABLES"
        "UNLOAD"
        "USE"
        "VIEWS"
        "VIRTUAL"
        "WATERMARK"
        "WATERMARKS"
        "TIMESTAMP_LTZ"
    ]

    # List of keywords from "keywords" section that are not reserved.
    nonReservedKeywords: [
        "A"
        "ABSENT"
        "ABSOLUTE"
        "ACTION"
        "ADA"
        "ADD"
        "ADMIN"
        "AFTER"
        "ALWAYS"
        "APPLY"
        "ASC"
        "ASSERTION"
        "ASSIGNMENT"
        "ATTRIBUTE"
        "ATTRIBUTES"
        "BEFORE"
        "BERNOULLI"
        "BREADTH"
        "C"
        "CASCADE"
        "CATALOG"
        "CATALOG_NAME"
        "CENTURY"
        "CHAIN"
        "CHARACTERISTICS"
        "CHARACTERS"
        "CHARACTER_SET_CATALOG"
        "CHARACTER_SET_NAME"
        "CHARACTER_SET_SCHEMA"
        "CLASS_ORIGIN"
        "COBOL"
        "COLLATION"
        "COLLATION_CATALOG"
        "COLLATION_NAME"
        "COLLATION_SCHEMA"
        "COLUMN_NAME"
        "COMMAND_FUNCTION"
        "COMMAND_FUNCTION_CODE"
        "COMMITTED"
        "CONDITIONAL"
        "CONDITION_NUMBER"
        "CONNECTION"
        "CONNECTION_NAME"
        "CONSTRAINT_CATALOG"
        "CONSTRAINT_NAME"
        "CONSTRAINTS"
        "CONSTRAINT_SCHEMA"
        "CONSTRUCTOR"
        "CONTINUE"
        "CURSOR_NAME"
        "DATA"
        "DATABASE"
        "DATETIME_INTERVAL_CODE"
        "DATETIME_INTERVAL_PRECISION"
        "DAYS"
        "DECADE"
        "DEFAULTS"
        "DEFERRABLE"
        "DEFERRED"
        "DEFINED"
        "DEFINER"
        "DEGREE"
        "DEPTH"
        "DERIVED"
        "DESC"
        "DESCRIPTION"
        "DESCRIPTOR"
        "DIAGNOSTICS"
        "DISPATCH"
        "DOMAIN"
        "DOW"
        "DOY"
        "DYNAMIC_FUNCTION"
        "DYNAMIC_FUNCTION_CODE"
        "ENCODING"
        "EPOCH"
        "ERROR"
        "EXCEPTION"
        "EXCLUDE"
        "EXCLUDING"
        "FINAL"
        "FIRST"
        "FOLLOWING"
        "FORMAT"
        "FORTRAN"
        "FOUND"
        "FRAC_SECOND"
        "G"
        "GENERAL"
        "GENERATED"
        "GEOMETRY"
        "GO"
        "GOTO"
        "GRANTED"
        "HIERARCHY"
        "HOP"
        "HOURS"
        "IGNORE"
        "IMMEDIATE"
        "IMMEDIATELY"
        "IMPLEMENTATION"
        "INCLUDING"
        "INCREMENT"
        "INITIALLY"
        "INPUT"
        "INSTANCE"
        "INSTANTIABLE"
        "INVOKER"
        "ISODOW"
        "ISOLATION"
        "ISOYEAR"
        "JAR"
        "JARS"
        "JAVA"
        "JSON"
        "K"
        "KEY"
        "KEY_MEMBER"
        "KEY_TYPE"
        "LABEL"
        "LAST"
        "LENGTH"
        "LEVEL"
        "LIBRARY"
        "LOAD"
        "LOCATOR"
        "M"
        "MAP"
        "MATCHED"
        "MAXVALUE"
        "MESSAGE_LENGTH"
        "MESSAGE_OCTET_LENGTH"
        "MESSAGE_TEXT"
        "MICROSECOND"
        "MILLENNIUM"
        "MILLISECOND"
        "MINUTES"
        "MINVALUE"
        "MONTHS"
        "MORE_"
        "MUMPS"
        "NAME"
        "NAMES"
        "NANOSECOND"
        "NESTING"
        "NORMALIZED"
        "NULLABLE"
        "NULLS"
        "NUMBER"
        "OBJECT"
        "OCTETS"
        "OPTION"
        "OPTIONS"
        "ORDERING"
        "ORDINALITY"
        "OTHERS"
        "OUTPUT"
        "OVERRIDING"
        "PAD"
        "PARAMETER_MODE"
        "PARAMETER_NAME"
        "PARAMETER_ORDINAL_POSITION"
        "PARAMETER_SPECIFIC_CATALOG"
        "PARAMETER_SPECIFIC_NAME"
        "PARAMETER_SPECIFIC_SCHEMA"
        "PARTIAL"
        "PASCAL"
        "PASSING"
        "PASSTHROUGH"
        "PAST"
        "PATH"
        "PLACING"
        "PLAN"
        "PLI"
        "PRECEDING"
        "PRESERVE"
        "PRIOR"
        "PRIVILEGES"
        "PUBLIC"
        "PYTHON"
        "QUARTER"
        "READ"
        "RELATIVE"
        "REMOVE"
        "REPEATABLE"
        "REPLACE"
        "RESPECT"
        "RESTART"
        "RESTRICT"
        "RETURNED_CARDINALITY"
        "RETURNED_LENGTH"
        "RETURNED_OCTET_LENGTH"
        "RETURNED_SQLSTATE"
        "RETURNING"
        "ROLE"
        "ROUTINE"
        "ROUTINE_CATALOG"
        "ROUTINE_NAME"
        "ROUTINE_SCHEMA"
        "ROW_COUNT"
        "SCALAR"
        "SCALE"
        "SCHEMA"
        "SCHEMA_NAME"
        "SCOPE_CATALOGS"
        "SCOPE_NAME"
        "SCOPE_SCHEMA"
        "SECONDS"
        "SECTION"
        "SECURITY"
        "SELF"
        "SEQUENCE"
        "SERIALIZABLE"
        "SERVER"
        "SERVER_NAME"
        "SESSION"
        "SETS"
        "SIMPLE"
        "SIZE"
        "SOURCE"
        "SPACE"
        "SPECIFIC_NAME"
        "SQL_BIGINT"
        "SQL_BINARY"
        "SQL_BIT"
        "SQL_BLOB"
        "SQL_BOOLEAN"
        "SQL_CHAR"
        "SQL_CLOB"
        "SQL_DATE"
        "SQL_DECIMAL"
        "SQL_DOUBLE"
        "SQL_FLOAT"
        "SQL_INTEGER"
        "SQL_INTERVAL_DAY"
        "SQL_INTERVAL_DAY_TO_HOUR"
        "SQL_INTERVAL_DAY_TO_MINUTE"
        "SQL_INTERVAL_DAY_TO_SECOND"
        "SQL_INTERVAL_HOUR"
        "SQL_INTERVAL_HOUR_TO_MINUTE"
        "SQL_INTERVAL_HOUR_TO_SECOND"
        "SQL_INTERVAL_MINUTE"
        "SQL_INTERVAL_MINUTE_TO_SECOND"
        "SQL_INTERVAL_MONTH"
        "SQL_INTERVAL_SECOND"
        "SQL_INTERVAL_YEAR"
        "SQL_INTERVAL_YEAR_TO_MONTH"
        "SQL_LONGVARBINARY"
        "SQL_LONGVARCHAR"
        "SQL_LONGVARNCHAR"
        "SQL_NCHAR"
        "SQL_NCLOB"
        "SQL_NUMERIC"
        "SQL_NVARCHAR"
        "SQL_REAL"
        "SQL_SMALLINT"
        "SQL_TIME"
        "SQL_TIMESTAMP"
        "SQL_TINYINT"
        "SQL_TSI_DAY"
        "SQL_TSI_FRAC_SECOND"
        "SQL_TSI_HOUR"
        "SQL_TSI_MICROSECOND"
        "SQL_TSI_MINUTE"
        "SQL_TSI_MONTH"
        "SQL_TSI_QUARTER"
        "SQL_TSI_SECOND"
        "SQL_TSI_WEEK"
        "SQL_TSI_YEAR"
        "SQL_VARBINARY"
        "SQL_VARCHAR"
        "STATE"
        "STATEMENT"
        "STRUCTURE"
        "STYLE"
        "SUBCLASS_ORIGIN"
        "SUBSTITUTE"
        "TABLE_NAME"
        "TEMPORARY"
        "TIES"
        "TIMESTAMPADD"
        "TIMESTAMPDIFF"
        "TOP_LEVEL_COUNT"
        "TRANSACTION"
        "TRANSACTIONS_ACTIVE"
        "TRANSACTIONS_COMMITTED"
        "TRANSACTIONS_ROLLED_BACK"
        "TRANSFORM"
        "TRANSFORMS"
        "TRIGGER_CATALOG"
        "TRIGGER_NAME"
        "TRIGGER_SCHEMA"
        "TUMBLE"
        "TYPE"
        "UNBOUNDED"
        "UNCOMMITTED"
        "UNCONDITIONAL"
        "UNDER"
        "UNLOAD"
        "UNNAMED"
        "USAGE"
        "USER_DEFINED_TYPE_CATALOG"
        "USER_DEFINED_TYPE_CODE"
        "USER_DEFINED_TYPE_NAME"
        "USER_DEFINED_TYPE_SCHEMA"
        "UTF16"
        "UTF32"
        "UTF8"
        "VERSION"
        "VIEW"
        "WEEK"
        "WORK"
        "WRAPPER"
        "WRITE"
        "XML"
        "YEARS"
        "ZONE"
    ]

    # List of non-reserved keywords to add;
    # items in this list become non-reserved.
    # Please keep the keyword in alphabetical order if new keyword is added.
    nonReservedKeywordsToAdd: [
        # not in core, added in easy-sql
        "ENFORCED"
        "IF"
        "METADATA"
        "OVERWRITE"
        "OVERWRITING"
        "PARTITIONED"
        "PARTITIONS"
        "VIRTUAL"
    ]

    # List of non-reserved keywords to remove;
    # items in this list become reserved
    nonReservedKeywordsToRemove: [
    ]

    # List of methods for parsing custom SQL statements.
    # Return type of method implementation should be 'SqlNode'.
    # Example: SqlShowDatabases(), SqlShowTables().
    statementParserMethods: [
        "RichSqlInsert()"
        "SqlBeginStatementSet()"
        "SqlEndStatementSet()"
        "SqlShowCatalogs()"
        "SqlShowCurrentCatalogOrDatabase()"
        "SqlDescribeCatalog()"
        "SqlUseCatalog()"
        "SqlShowDatabases()"
        "SqlUseDatabase()"
        "SqlAlterDatabase()"
        "SqlDescribeDatabase()"
        "SqlAlterFunction()"
        "SqlShowFunctions()"
        "SqlShowTables()"
        "SqlShowCreateTable()"
        "SqlRichDescribeTable()"
        "SqlAlterTable()"
        "SqlAlterView()"
        "SqlShowViews()"
        "SqlRichExplain()"
        "SqlSet()"
    ]

    # List of methods for parsing custom literals.
    # Return type of method implementation should be "SqlNode".
    # Example: ParseJsonLiteral().
    literalParserMethods: [
    ]

    # List of methods for parsing ddl supported data types.
    # Return type of method implementation should be "SqlTypeNameSpec".
    # Example: SqlParseTimeStampZ().
    dataTypeParserMethods: [
        "ExtendedSqlBasicTypeName()"
        "CustomizedCollectionsTypeName()"
        "SqlMapTypeName()"
        "SqlRawTypeName()"
        "ExtendedSqlRowTypeName()"
    ]

    # List of methods for parsing builtin function calls.
    # Return type of method implementation should be "SqlNode".
    # Example: DateFunctionCall().
    builtinFunctionCallMethods: [
    ]

    # List of methods for parsing extensions to "ALTER <scope>" calls.
    # Each must accept arguments "(SqlParserPos pos, String scope)".
    # Example: "SqlUploadJarNode"
    alterStatementParserMethods: [
    ]

    # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls.
    # Each must accept arguments "(SqlParserPos pos, boolean replace)".
    createStatementParserMethods: [
        "SqlCreateExtended"
    ]

    # List of methods for parsing extensions to "DROP" calls.
    # Each must accept arguments "(Span s)".
    dropStatementParserMethods: [
        "SqlDropExtended"
    ]

    # Binary operators tokens
    binaryOperatorsTokens: [
    ]

    # Binary operators initialization
    extraBinaryExpressions: [
    ]

    # List of files in @includes directory that have parser method
    # implementations for parsing custom SQL statements, literals or types
    # given as part of "statementParserMethods", "literalParserMethods" or
    # "dataTypeParserMethods".
    implementationFiles: [
        "parserImpls.ftl"
    ]

    # List of additional join types. Each is a method with no arguments.
    # Example: LeftSemiJoin()
    joinTypes: [
    ]

    includePosixOperators: false
    includeCompoundIdentifier: true
    includeBraces: true
    includeAdditionalDeclarations: false
}